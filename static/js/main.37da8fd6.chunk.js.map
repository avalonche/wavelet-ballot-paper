{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","BigInt","JSBI","props","FaucetButton","WF","theme","themes","mono","_useState","useState","_useState2","Object","_Users_sarah_wavelet_ballot_paper_ballot_paper_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","host","setHost","_useState3","Buffer","from","Wavelet","generateNewWallet","secretKey","toString","_useState4","privateKey","setPrivateKey","_useState5","undefined","_useState6","client","setClient","_useState7","_useState8","contractAddress","setContractAddress","_useState9","_useState10","contract","setContract","_useState11","_useState12","voted","setVoted","_useState13","_useState14","submitted","setSubmitted","_useState15","_useState16","account","setAccount","_useState17","_useState18","contractAccount","setContractAccount","accountRef","useRef","contractAccountRef","_useState19","_useState20","year","setYear","_useState21","_useState22","setLocation","_useState23","_useState24","candidates","setCandidates","_useState25","_useState26","voteResults","setVoteResults","_useState27","_useState28","preferences","setPreferences","useEffect","current","_useState29","accounts","consensus","_useState30","sockets","setSockets","socketsRef","reset","close","connect","_ref","_Users_sarah_wavelet_ballot_paper_ballot_paper_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_sarah_wavelet_ballot_paper_ballot_paper_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","_client","wallet","walletAddress","wrap","_context","prev","next","loadWalletFromPrivateKey","publicKey","t0","getAccount","t1","sent","pollAccounts","onAccountUpdated","msg","event","_objectSpread","balance","id","t2","alert","stop","apply","this","arguments","load","_ref2","_callee3","_context3","Contract","init","pollConsensus","onRoundEnded","_","_callee2","_context2","fetchAndPopulateMemoryPages","parseJson","test","gas_balance","logs","parseString","Uint8Array","length","sendVote","_ref4","_callee4","response","_context4","type","value","checkVoteValid","abrupt","call","result","JSON","parse","split","react__WEBPACK_IMPORTED_MODULE_4___default","Fragment","_rebass_grid__WEBPACK_IMPORTED_MODULE_7__","flexWrap","mx","width","px","pr","mb","alignItems","className","pb","flex","disabled","data-lpignore","onKeyPress","_ref5","_callee5","e","_context5","key","_x","onChange","evt","target","placeholder","style","minWidth","ml","onClick","_ref6","_callee6","_context6","_x2","modalHeader","position","right","bottom","address","public_key","classPrefix","mt","map","candidate","points","rebass__WEBPACK_IMPORTED_MODULE_8__","src","sx","index","_rebass_forms__WEBPACK_IMPORTED_MODULE_9__","name","defaultValue","preference","parseInt","configurePreferences","c","i","height","textAlign","concat"],"mappings":"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","file":"static/js/main.37da8fd6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect, useRef, useState} from 'react';\nimport {Contract, Wavelet} from 'wavelet-client';\nimport WF from \"wavelet-faucet\";\nimport {Box, Flex} from '@rebass/grid';\nimport {Image} from 'rebass'\nimport {Label, Select} from '@rebass/forms'\nimport JSBI from 'jsbi';\n\nconst BigInt = JSBI.BigInt;\n\nconst App = (props) => {\n    const FaucetButton = WF.FaucetButton;\n    const theme = WF.themes.mono;\n\n    const [host, setHost] = useState('https://testnet.perlin.net');\n    const [privateKey, setPrivateKey] = useState(\n        Buffer.from(Wavelet.generateNewWallet().secretKey, 'binary').toString('hex')\n    );\n    const [client, setClient] = useState(undefined);\n    const [contractAddress, setContractAddress] = useState(\n        '38f54a1f52ec226a40d806156fb0434c71ae09fd0073aa3de2e0515a8948b0f3'\n    );\n    const [contract, setContract] = useState(undefined);\n    const [voted, setVoted] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n\n    const [account, setAccount] = useState(undefined);\n    const [contractAccount, setContractAccount] = useState(undefined);\n\n    const accountRef = useRef(account);\n    const contractAccountRef = useRef(contractAccount);\n\n    const [year, setYear] = useState(undefined);\n    const [location, setLocation] = useState(undefined)\n\n    const [candidates, setCandidates] = useState([]);\n\n    const [voteResults, setVoteResults] = useState([])\n\n    // load dynamically from contract \n    const [preferences,setPreferences] = useState([]);\n\n    useEffect(() => {\n        accountRef.current = account;\n    }, [account]);\n\n    useEffect(() => {\n        contractAccountRef.current = contractAccount;\n    }, [contractAccount])\n\n    const [sockets, setSockets] = useState({\n        accounts: undefined,\n        contract: undefined,\n        consensus: undefined\n    });\n\n    const socketsRef = useRef(sockets);\n    useEffect(() => {\n        socketsRef.current = sockets;\n    }, [sockets]);\n\n    const reset = () => {\n        setClient(undefined);\n        setAccount(undefined);\n        setContractAccount(undefined);\n\n        setContract(undefined);\n        setContractAddress('');\n        setVoted(false);\n        setSubmitted(false);\n        setCandidates([]);\n        setYear(undefined);\n        setLocation(undefined);\n        setVoteResults([]);\n        setPreferences([]);\n\n\n        const sockets = socketsRef.current;\n\n        if (sockets.accounts) {\n            sockets.accounts.close(1000, 'connection closing normally');\n        }\n\n        if (sockets.contract) {\n            sockets.contract.close(1000, 'connection closing normally');\n        }\n\n        if (sockets.consensus) {\n            sockets.consensus.close(1000, 'connection closing normally');\n        }\n\n        setSockets({accounts: undefined, consensus: undefined});\n    };\n\n    const connect = async () => {\n        if (client === undefined) {\n            try {\n                const client = new Wavelet(host);\n\n                const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n                const walletAddress = Buffer.from(wallet.publicKey).toString('hex');\n                setAccount(await client.getAccount(walletAddress));\n\n                setClient(client);\n\n                sockets.accounts = await client.pollAccounts(\n                    {\n                        onAccountUpdated: msg => {\n                            switch (msg.event) {\n                                case 'balance_updated': {\n                                    setAccount({...accountRef.current, balance: msg.balance});\n                                    break;\n                                }\n                                default: {\n                                    break;\n                                }\n                            }\n                        }\n                    },\n                    {id: walletAddress}\n                );\n\n                setSockets(sockets);\n            } catch (error) {\n                reset();\n                alert(error);\n            }\n        } else {\n            reset();\n        }\n    };\n\n    const load = async () => {\n        setContractAccount(await client.getAccount(contractAddress));\n\n        // Initialize\n        const contract = new Contract(client, contractAddress);\n        await contract.init();\n\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n\n        // Every single time consensus happens on Wavelet, query for the latest\n        // vote results \n\n        sockets.consensus = await client.pollConsensus({\n            onRoundEnded: _ => {\n                if (contract === undefined) {\n                    return;\n                }\n\n                (async () => {\n                    await contract.fetchAndPopulateMemoryPages();\n                    setVoteResults(parseJson(contract.test(wallet, 'get_vote_results', BigInt(0))));\n                })();\n            }\n        });\n\n        sockets.contract = await client.pollAccounts(\n            {\n                onAccountUpdated: msg => {\n                    switch (msg.event) {\n                        case 'gas_balance_updated': {\n                            setContractAccount({...contractAccountRef.current, gas_balance: msg.gas_balance});\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            },\n            {id: contractAddress}\n        );\n\n        setSockets(sockets);\n        \n        setYear(contract.test(wallet, 'get_vote_year', BigInt(0)).logs);\n        setLocation(contract.test(wallet, 'get_location', BigInt(0)).logs);\n\n        setCandidates(parseString(contract.test(wallet, 'get_candidates', BigInt(0))));\n        setVoteResults(parseJson(contract.test(wallet,'get_vote_results', BigInt(0))));\n        setPreferences(new Uint8Array(parseString(contract.test(wallet, 'get_candidates', BigInt(0))).length));\n        setContract(contract);\n    };\n\n    const sendVote = async () => {\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n        const response = contract.test(wallet, 'send_vote', BigInt(0), BigInt(250000), BigInt(0), {\n            type: 'bytes',\n            value: preferences\n        });\n        if (!checkVoteValid(response)) {\n            return;\n        };\n        await contract.call(wallet, 'send_vote', BigInt(0), BigInt(250000), BigInt(0), {\n            type: 'bytes',\n            value: preferences\n        });\n        setPreferences([]);\n        setVoted(false);\n        setSubmitted(true);\n    };\n    const checkVoteValid = (response) => {\n        const {result} = response;\n        if (result != null) {\n            window.alert(result);\n            return 0;\n        }\n        return 1;\n    }\n    const configurePreferences = (preference, candidate, index) => {\n        preference = parseInt(preference);\n        preferences[index] = preference;\n        setVoted(true);\n    };\n\n    const parseJson = (response) => {\n        const {logs}  = response;\n        const data = JSON.parse(logs[0]);\n        return data;\n    };\n\n    const parseString = (response) => {\n        const {logs} = response;\n        const data = logs[0].split(\"\\n\");\n        return data;\n    };\n    // error if vote invalid \n    return (\n        <>\n        <Flex flexWrap='wrap' mx={-2}>\n            <Box width={1/2} px={3} pr={4}>\n                <Box mb={4} alignItems=\"center\">\n                    <h1 className=\"text-center title\" mb={4} pb={4}>\n                    LOAD ELECTION CONTRACT\n                    </h1>\n                </Box>\n                <Flex mb={2} alignItems=\"center\">\n                    <Box flex=\"0 0 80px\">\n                        <label>[node]</label>\n                    </Box>\n                    <Box flex=\"1\">\n                        <Flex width=\"1\">\n                            <Box flex=\"1\">\n                                <input\n                                    type=\"text\"\n                                    value={host}\n                                    disabled={client}\n                                    data-lpignore=\"true\"\n                                    onKeyPress={async e => {\n                                        if (e.key === 'Enter') {\n                                            await connect();\n                                        }\n                                    }}\n                                    onChange={evt => setHost(evt.target.value)}\n                                />\n                            </Box>\n                        </Flex>\n                    </Box>\n                </Flex>\n                <Flex mb={2} alignItems=\"center\">\n                    <Box flex=\"0 0 80px\">\n                        <label>[secret]</label>\n                    </Box>\n                    <Box flex=\"1\">\n                        <input\n                            type=\"text\"\n                            value={privateKey}\n                            placeholder=\"input unique secret...\"\n                            disabled={client}\n                            data-lpignore=\"true\"\n                            onChange={evt => setPrivateKey(evt.target.value)}\n                        />\n                    </Box>\n                    <Box width={3 / 16} style={{minWidth: '10em'}} ml={2}>\n                                <button\n                                    style={{width: '100%'}}\n                                    onClick={connect}\n                                    disabled={privateKey.length !== 128}\n                                >\n                                    {client ? 'Disconnect' : 'Connect'}\n                                </button>\n                            </Box>\n                </Flex>\n                <Flex mb={4} alignItems=\"center\">\n                    <Box flex=\"0 0 80px\">\n                        <label>[contract]</label>\n                    </Box>\n                    <Box flex=\"1\">\n                        <Flex width={1}>\n                            <Box width={9 / 12}>\n                                <input\n                                    type=\"text\"\n                                    value={contractAddress}\n                                    placeholder=\"input ballot paper smart contract address...\"\n                                    disabled={!client}\n                                    data-lpignore=\"true\"\n                                    onKeyPress={async e => {\n                                        if (e.key === 'Enter') await load();\n                                    }}\n                                    onChange={evt => setContractAddress(evt.target.value)}\n                                />\n                            </Box>\n                            <Box width={3 / 12} style={{minWidth: '10em'}} ml={2}>\n                                <button\n                                    style={{width: \"100%\"}}\n                                    disabled={!client || contractAddress.length !== 64}\n                                    onClick={load}\n                                >\n                                    Load Ballot Paper\n                                </button>\n                            </Box>\n                        </Flex>\n                    </Box>\n                </Flex>\n                <FaucetButton modalHeader theme={theme} style={{position: 'fixed', right: '50px', bottom: '0px'}} address={account && account.public_key} classPrefix=\"faucet\"> \n                Faucet\n                </FaucetButton>\n                <Box mt={4} mb={4} alignItems=\"center\">\n                    <h1 className=\"text-center title\">\n                    CURRENT VOTING RESULTS\n                    </h1>\n                </Box> \n                {voteResults.map((result) => (\n                    <Flex mb={4} alignItems=\"center\">\n                    <Box width={3/4}>\n                        <label>{result.candidate}</label>\n                    </Box>\n                    <Box flex=\"1\">\n                        {result.points} point(s)\n                    </Box>\n                </Flex>\n                ))}\n            </Box>      \n        <Box width={1/2} px={2}>\n            <Image \n                src='/logo-crest.png' \n                sx={{\n                    width: [ '20%', '25%' ]\n                }}/>\n            <Box mb={4} alignItems=\"center\">\n                <h1 className=\"text-center title\" mb={4} pb={4}>\n                BALLOT PAPER\n                </h1>\n                <h2>\n                    Year: {year}\n                </h2>\n                <h2>\n                    Location: {location}\n                </h2>\n            </Box>\n            {candidates.map((candidate, index) => (\n                <Flex mb={4} alignItems=\"center\">\n                <Box width='4em' style={{minWidth: '4em'}} ml={2}>\n                <Select\n                    name={candidate}\n                    defaultValue='0'\n                    onChange={evt => configurePreferences(evt.target.value, candidate, index)}\n                    >\n                    <option value='0' disabled></option>\n                    {candidates.map((c, i) => (\n                    \n                    <option\n                        value={candidates.length - i}>\n                        {i+1}\n                    </option>\n                    ))}\n                </Select>\n                </Box>\n                <Box flex=\"1\">\n                    <Label px={4}>{candidate}</Label>\n                </Box>\n                </Flex>\n            ))}\n            <Flex>\n            <Box width={1/2}> </Box>\n            <Box flex=\"1\" width={5/17} mb={4}>\n                <button\n                    className=\"fw\"\n                    style={{height: \"98%\"}}\n                    disabled={\n                        !client ||\n                        !contract ||\n                        !account ||\n                        account.balance < 2 ||\n                        contractAccount.gas_balance + account.balance < 250000 ||\n                        !voted ||\n                        submitted\n                    }\n                    onClick={sendVote}\n                >\n                    Submit Vote\n                </button>\n            </Box>\n            </Flex>\n            <Flex mb={2} style={{textAlign:\"right\"}}>\n                <Box flex=\"0 0 150px\">\n                    <label>Balance</label>\n                </Box>\n                <Box flex=\"1\">\n          <span>{`${\n              account && account.balance ? account.balance : 0\n              } PERL(s)`}</span>\n                </Box>\n            </Flex>\n            </Box>\n        </Flex>\n        </>\n    );\n};\n\nexport default App;"],"sourceRoot":""}